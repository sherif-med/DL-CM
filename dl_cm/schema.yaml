# Define the root keys with their types
experiment_name: str()
experiment_checkpoint_directory: str()
experiment_logging_directory: str()

datainfo:
  preprocessing: 
    name: registered_preprocessing(required=False)
    params: include('params')
  apply_augmentation: bool(required=False)
  datasets: list(include('dataset'))
  common_loaders_params: include('common_loaders_params', required=False)
  dataloaders: list(include('dataloader'))

trainer:
  params: include('params')
  callbacks: list(include('callback'))
  loggers: list(include('logger'))

task:
  name: registered_task()
  model:
    params: include('params')
  task_def: include('params')
  optimizer: 
    name: registered_optimizer()
    params: include('params')
  lr_scheduler: include('lr_scheduler', required=False)
  critireon:
    name: str(required=False)
    log_on_epoch: bool(required=False)
    log_on_step: bool(required=False)
    def: map(include('loss'), key=registered_critireon())
  metrics:
    train_mode: include('metric_mode')
    valid_mode: include('metric_mode')
  var_reduction: map(any(), required=False)

# Define reusable components
---
dataset:
  name: str()
  split_ratio: list(num(),required=False)
  augmentations: list(registered_augtrans(), required=False)
  datasettype: 
    name: registered_dataset()
    params: include('params')
  #preprocessing: registered_preprocessing(required=False)

dataloader:
  name: str()
  respective_dataset_name: str()
  params: include('params')

callback:
  name: registered_callback()
  params: include('params')

logger:
  name: registered_logger()
  params: include('params')

loss:
  params: include('params')
  weight: num(min=0)
  log_on_epoch: bool(required=False)
  log_on_step: bool(required=False)

metric:
  name: registered_metric()
  params: include('params')

metric_mode:
  log_on_epoch: bool(required=False)
  log_on_step: bool(required=False)
  defs: list(include('metric'))

lr_scheduler:
  name: registered_scheduler()
  params: include('params')

params:  # Reusable component for params
  map(any(), required=False)

common_loaders_params:
  num_workers: int(required=False)
  batch_size: int(required=False)
  shuffle: bool(required=False)
  drop_last: bool(required=False)
  collate_fn: str(required=False)

named_entity:
  name: str()
  params: include('params')

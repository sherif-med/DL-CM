# Define the root keys with their types
experiment_name: str()
experiment_checkpoint_directory: str()
experiment_logging_directory: str()

datamodule:
  name: registered_datamodule()
  params:
    preprocessing:
      apply: bool(required=False)
      name: registered_transformation(required=False)
      params: map(any(), required=False)
    augmentation:
      apply: bool(required=False)
      augmentations: list(include('named_entity'))
    datasets: list(include('dataset'))
    common_dataloader_params: map(key=str(), required=False)
    dataloaders: map(include('dataloader'), key=enum("train", "valid", "test", "predict"))
    extra: map(any(), required=False)

trainer:
  name: registered_trainer()
  params: map(any(), required=False)
  callbacks: list(include('callback'))
  loggers: list(include('logger'))

task:
  name: registered_task()
  params:
    learner: include('learner')

# Define reusable components
---
dataset:
  name: registered_dataset()
  reference_name: str(required=False)
  params: map(any(), required=False)

dataloader:
  name: str()
  #dataset_reference_name: str()
  params: map(any(), required=False)

callback:
  name: registered_callback()
  params: map(any(), required=False)

logger:
  name: registered_logger()
  params: map(any(), required=False)

learner:
  name: registered_learner()
  params: map(any(), required=False)
  #model: include('model')
  #optimizer: include("optimizer")
  #lr_scheduler: include("lr_scheduler", required=False)
  #critireon:
  #  name: registered_critireon()
  #  params: map(any(), required=False)

optimizer:
  name: registered_optimizer()
  params: map(any(), required=False)

lr_scheduler:
  name: registered_scheduler()
  params: map(any(), required=False)

model:
  name: registered_model()
  params: map(any(), required=False)

named_entity:
  name: str()
  params: map(any(), required=False)
